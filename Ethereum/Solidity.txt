-> Variables , Types ( value and referene types , complex type (string), user defined ) , Functions , 
   Visibility , Modifiers , Custom Modifiers , constructors , global variables , operators , conditionals , Arrays , Mappings , Structs , Events , Ether , Errors , Inheritance , calling other functions , interface
-> receive , fallback , call , send , transfer , payable , enums
—> stack is the local variable ( cheapest of all variables )
—> calldata was the temp variable that can't be modified, memory was the temp variable that can be modified in the function execution 
-> Data location can only be specified for arrays ,structs or mappings ( a string is an array or bytes )
—> we can't add state variables in libraries
—> new address[](size) - dynamic arrays in Solidity are initialised with default values ( here zero addresses )
—> Solidity is a synchronous language
-> safemath and libraries , what are checked and unchecked ( overflow or underflow checks are default in over 0.8 version , unchecked can be used to reduce the gas by explicitily specifying do not check for any overflow underflow for a specific expression )
-> in Solidity in order to send native blockchain tokens like etherem , you can only work with payable address to do that 
-> enums , events , try catch , function selectors , abi encode and decode , hashing and assembly --> The try keyword has to be followed by an expression representing an external function call or a contract creation (new ContractName())
-> Ether in Solidity has 18 decimal places
--> Public: Accessible everywhere; includes an automatic getter for variables.
    Private: Accessible only within the contract where it is defined; not visible to derived contracts.
    Internal: Accessible within the contract and by derived contracts; not visible externally.
    External: Functions accessible only from outside the contract; variables cannot have external visibility.
-> Enums in Solidity are a simply way to give names to a set of integer values, and these names are internally mapped to unsigned integers starting from 0.
-> enum: User-defined types for creating a set of named constants
-> different Data types : value types - uint, int, bool ,address ,enum, bytes , and reference types - strings, arrays, mappings, structs
-> address: Holds a 20 byte value (size of an Ethereum address).
-> function (<parameter types>) {internal|external|public|private} [pure|view|payable] [returns (<return types>)]
-> Data location : memory (whose lifetime is limited to an external function call), storage (the location where the state variables are stored, where the lifetime is limited to the lifetime of a contract) or calldata (special data location that contains the function arguments).
-> type(int256).min , InterfaceIdentifier - type(<InterfaceName>).interfaceId , bytes1 a = 0xb5; //  [10110101]
-> EIP-165 is a standard that enables smart contracts to declare the interfaces they implement. The interface identifier for an interface like IERC20 is derived by XORing all of the function selectors in that interface. This identifier is stored as type(IERC20).interfaceId and helps other contracts verify that a given contract implements IERC20 without needing to know the implementation details
-> This EIP-165 standards was decided by the developer whether they are accepting or not , but it does not really checks and compare all of the functions init to the ERC20 functions
-> For example, if a function is defined as function transfer(address to, uint256 amount), its signature is "transfer(address,uint256)". The function selector is then the first 4 bytes of the Keccak-256 hash of this signature
-> In Solidity, when you define a public state variable of a struct type, the compiler automatically generates a "getter" function for you. However, if your struct contains dynamic arrays (such as address[], uint256[], etc.) and mappings, the default getter cannot provide a complete representation of the struct - why we have this exception in solidity as reading data from blockchain is free --> Dynamic arrays can be arbitrarily large. For example, if you store a struct with a dynamic array containing thousands of elements, returning the entire array in one call would consume a significant amount of gas during the computation of the response.
-> Mappings are not iterable because keys are not stored in a specific order or as a list
-> mappings are implemented in Solidity—they are not iterable or copyable since their data structure resides only in storage and not in memory.
-> Member "push" is not available in address[] memory outside of storage ? - In Solidity, the push method is only available for dynamic storage arrays. It is not available for arrays declared in memory because memory arrays are fixed in size when they are created, even if they are declared as dynamic. This is a key design of Solidity to optimize performance and avoid dynamic memory allocation during execution
-> if you define variables in Solidity without explicitly specifying their visibility, they are private
-> uint256 test = uint256(1) / uint256(37); --> return value is zero why 
     - Solidity uses integer arithmetic, so division always truncates toward zero.
     - To retain precision, scale values before performing the division.
-> When a transaction reverts:
     - All state changes made during the transaction are undone.
     - Events emitted during the transaction are also discarded.
     - The transaction is effectively as if it never happened.
-> in Upgradable smart contracts ( in implementation contracts we can add new varialbles but can't reorder the existing storage variables)
-> EIP - 2535 Diamond proxy pattern ( static router (less expensive) , dynamic router ( more expensive))
-> Proxy patterns ( https://docs.openzeppelin.com/upgrades-plugins/1.x/proxies)
     - Unstructured Storage Proxies
     - Beacon contract address in EIP-1967 ( Beacon Proxy pattern ) - It simplifies the upgrade process for multiple proxies by centralizing the management of the implementation contract address
     - Storage Collisions between Proxy and Implementation Contracts - above EIP is the solution
     - Storage Collisions Between Implementation Versions - need to adapt to previos implementation Contracts
-> for stack too deep error in solidity , try to add variables into a struct
-> Multuply first and then to division with this there will be no precesion loss
-> By default, Solidity does not return 0 for non-existent indices in arrays; it throws an out-of-bounds error.
-> Event logs come with a timestamp, so there is no need to add another timestamp variable in it.
-> Bitmask for storing boolean storage variables - packing of variables
-> central logging mechanism like logs needs to be emitted by only one main contract
-> if we want to generate addresses using number that number type must be a uint160
-> we can write custom erros and free functions outside of the smart contract too
-> with call function we can able to call functions in other smart contracts
-> keccack hash collision 
     - (not 100% sure ) this will happen only when we have two dynamic data types next to each other ( string , string )
-> selfdesctruct is deprecated now - but previously it has a capability to force send the Ehter if the caller contract does not have any payable fallback function which is capable of receiving ether
-> Generating Bytecode of a contract - abi.encodePacked(type(ContractName).creationCode) , (not 100% sure ) if it has any constants or immutable data types we need to add those to the encodePacked
-> witht the help of create2 deployment method we can precompile the address of the smart contract as we are the person who is going to provide salt bytes to create a contract
-> abi.encodeWithSignature('functionName(uint256)',200)
   abi.encodeWithSelector(this.functionName.selector,200)
   abi.encodeWithSelector(bytes4(keccak256(bytes('functionName(uint256)'))))
-> this.functionName is the function pointer
-> multi call - we can do it with call or staticCall
-> staticcall - Invoking a view or pure function in another contract to read state or perform computations without modifying the blockchain state , where as call function is used when we want to change the state of the blockchain 
-> abi.encodePacked("hello") and bytes("hello") gives the same output
-> bytes(string) costs roughly 445 less Gas -  The first is copying the memory, the second is just casting the pointer type.
-> (complicated) to decode an encodePacked we need to seperate all the different data types and need to type cast with that respective data type and there is not other decoding strategy for this 
-> For reference types (e.g., arrays, mappings, structs): delete resets the reference itself but retains the data in storage for arrays and mappings
-> updateValue(uint256) is the function signature and the hash generated with this is function selector
-> the hex code data which we send from our wallet ( metamask ) is call data which contains function selector at the first four bytes
-> difference between vyper and solidity is free memory pointer ( dynamic memory allocation ) , vyper does not have this feature
-> for every function written in lowlevel language we must have stop optcode at the end of the function ( if we have return which halts the execution stop is not required )
-> byte offset refers to the starting from nth byte in the memory or storage or stack
-> transparent proxy pattern - A transparent proxy will decide which calls are delegated to the underlying logic contract based on the caller address
-> need to have a grip on type conversions and type casting
-> Solidity does not allow implicit widening or narrowing between signed and unsigned types unless the bit-widths match exactly ( EX: Conversion from uint160 to int184 )
-> typeconvertions from string to bytes and bytes to string will work , but not between string and bytes32 as there is a possibility of data loss
-> When defining array literals ([1,2]) inside a function, Solidity infers the type of the array based on the smallest data type needed to represent the values in the array -->     uint256[] memory tempArr = [1,2];  --> TypeError: Type uint8[2] memory is not implicitly convertible to expected type uint256[] memory.
-> Limitations for memory arrays that we usually define inside of a function 
-> bytes memory empty = hex"";
-> Ethereum uses RLP encoding ( v , R and S values) of signatures and Bitcoin uses DER encoding ( R and S values) - https://ethereum.stackexchange.com/questions/64380/understanding-ethereum-signatures/64398#64398
-> why when creating a signature we need to send values as r,s and v instead of v , r and s - due to historical conventions and how cryptographic libraries (like elliptic and secp256k1) and Ethereum itself have chosen to serialize and handle signatures and bitcoin itself doesnot have a v which is only used by ethereum
-> type of privatekey when using in tests - uint256  , its real format is hex
-> in Solidity, any executable statements must be placed inside functions, constructors, or modifiers—not directly in the contract body
-> In a function - Checks , Effects and Intereactions
-> soldeer - solidity package manager build along with foundry
-> Member "push" is not available in struct TokenPool.ChainUpdate[] memory outside of storage.solidity(4994)
-> Only constants of value type and byte array type are implemented.solidity(9259) - using constant for bytes32[] is n
-> However, there is no way to stop an attacker from sending ether to a contract by self destroying. Hence, it is important not to count on the invariant address(this).balance == 0 for any contract logic.
-> we can only ready Private variables data using off chain - await web3.eth.getStorageAt(contractAddress, 0);
-> storage Calculation for element location in arrays
   - Fixed-Size Arrays: Use data.slot + index directly.
   - Dynamic Arrays: Use keccak256(data.slot, 0x20) + index (due to Solidity's storage rules for dynamic types).
-> need to expert in type conversions
-> address to bytes8 conversion - bytes8(uint64(uint160(address)))
-> tx.origin - Represents the externally owned account (EOA) that initiated the entire transaction chain.
-> in an hex code , 2 letters represent 1 byte
-> if we call another contract in a contructor , current contracts codesize is zero when the constructor transaction is executing in the anoter contract , because the current contract is still not deployed
-> s ^ key = max ( we will bet below byt applying xor with s on both the sides and a ^ a ^ b = b)
   key = s ^ max 
-> if we want to send Ether to EOA using a contract , then we must need to mark that address as payable for ony send and transfer and for call we dont need the EOA to be marked as payable as it will by pass that check
-> assert(condition) -  Consumes all remaining gas if the condition fails (unlike require and revert) - for below 0.8 versions of solidity
-> assembly { invalid() } - Consumes all of the gas
-> Always specify a fixed gas stipend for low-level calls to prevent denial-of-service (DoS) attacks
-> When making an external call in Solidity using call, delegatecall, or staticcall, the EVM enforces a 63/64 gas forwarding rule
-> EIP-161 (State Trie Clearing) introduced a rule that contract accounts are initialized with nonce = 1, instead of nonce = 0 - This applies only to externally created contract accounts, not user accounts
-> if we deploy AA code in one chain , we need to deploy in all other chains like L2s to achieve this in that specific chain
-> Solidity Optimizer - runs is not how many times the optimizer will run but how many times you expect to call functions in that smart contract. If the smart contract is only of one-time use as a smart contract for vesting or locking of tokens, you can set the runs value to 1 so that the compiler will produce the smallest possible bytecode but it may cost slightly more gas to call the function(s). If you are deploying a contract that will be used a lot (like an ERC20 token), you should set the runs to a high number like 1337 so that initial bytecode will be slightly larger but calls made to that contract will be cheaper. Commonly used functions like transfer will be cheaper
-> for Lower deployment const runs is 1 and for lower execution cost runs is 200 or much higher
-> Zero-knowledge proofs (ZKPs) are cryptographic protocols that allow one party (the prover) to convince another party (the verifier) that a statement is true without revealing any information beyond the validity of the statement itself
-> How to create a smart contract using another smart contract - using new ( standard deployment), using create and create2 ( low level deployment )
-> if L2 breaks how user can easily escape the funds from L2 to L1 ( withdrawsls in escape hatch mode)
-> selfdestruct removes a contract's bytecode and storage but does not erase its address , but after dencun update it wont remove the bytecode if we wont call the selfdestruct in the same transaction
-> Why optocodes deals with storage has more gas cost than memory or stack , what does it actually do or how does it differs internally
  --Changing a value in storage requires:
    Fetching the existing value from the Ethereum State Trie (SLOAD).
    Computing the new value.
    Updating the trie structure, which may involve multiple hash computations (Keccak256).
    Propagating the changes across all full nodes.
    Compare this with stack operations, which are just pushing/popping values within a single transaction’s execution (cheap and immediate).
-> 







